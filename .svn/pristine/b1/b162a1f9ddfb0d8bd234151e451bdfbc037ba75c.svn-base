<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:p="http://www.springframework.org/schema/p" 
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xmlns:context="http://www.springframework.org/schema/context"  
    xsi:schemaLocation="
  		http://www.springframework.org/schema/beans 
  		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd  
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd  
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">  
  
  <!-- 零、引入database.properties -->
  <context:property-placeholder location="classpath:database.properties"/>
  
  <!-- 一、Mybatis配置dbcp数据源,此前用的POOLED与JNDI -->
  <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" 
  		destroy-method="close"
  		p:driverClassName="${jdbc.driver}"
  		p:url="${jdbc.url}"
  		p:username="${jdbc.username}"
  		p:password="${jdbc.password}">
  </bean>
  
  <!-- 二、Mybatis配置SqlSessionFactory对象 -->
   	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
  		<property name="dataSource" ref="dataSource"/>
  		<property name="configLocation" value="classpath:mybatis-config.xml"/>
  		<!-- <property name="mapperLocations">
  			<list>
  			<value>classpath:com/easybuy/dao/**/*.xml</value>
  			</list>
  		</property> -->
  	</bean>
  <!-- TODO 引用Mapper.xml映射文件在分模块配置文件中设置 -->
 	
  <!-- 三、TODO MapperScanner扫描mapper.xml所在的包，生成Mapper实现类，在分模块配置文件中设置  -->
  	
  <!-- 四、Spring配置开启扫描 -->
  <!-- 1、TODO 开启IOC扫描，此处仅扫描aop、entity所在的包 -->
  <context:component-scan base-package="com.easybuy.aop,com.easybuy.entity" />  
  <!-- 2、开启对AOP注解驱动 -->
  <aop:aspectj-autoproxy />
  <!-- 3、开启事务注解驱动 -->
  <tx:annotation-driven transaction-manager="txManager" />
  <!-- 五、Spring事务管理 -->  
  <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
  		<property name="dataSource" ref="dataSource"></property>
  </bean>
  
  <!-- 六、jedis连接池配置 -->
  <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
      <!-- 最大连接数 -->
      <property name="maxActive" value="30" />
      <!-- 最大空闲连接数 -->
      <property name="maxIdle" value="10" />
      <!-- 每次释放连接的最大数目 -->
      <property name="numTestsPerEvictionRun" value="1024" />
      <!-- 释放连接的扫描间隔（毫秒） -->
      <property name="timeBetweenEvictionRunsMillis" value="30000" />
      <!-- 连接最小空闲时间 -->
      <property name="minEvictableIdleTimeMillis" value="1800000" />
      <!-- 连接空闲多久后释放, 当空闲时间>该值 且 空闲连接>最大空闲连接数 时直接释放 -->
      <property name="softMinEvictableIdleTimeMillis" value="10000" />
      <!-- 获取连接时的最大等待毫秒数,小于零:阻塞不确定的时间,默认-1 -->
      <property name="maxWait" value="1500" />
      <!-- 在获取连接的时候检查有效性, 默认false -->
      <property name="testOnBorrow" value="false" />
      <!-- 在空闲时检查有效性, 默认false -->
      <property name="testWhileIdle" value="true" />
      <!-- 连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true -->
      <!-- <property name="blockWhenExhausted" value="false" /> -->
  </bean>
  <!-- redis连接池 -->
  <bean id="jedisPool" class="redis.clients.jedis.JedisPool" destroy-method="destroy">
      <constructor-arg name="poolConfig" ref="jedisPoolConfig" />
      <constructor-arg name="host" value="localhost" />
      <constructor-arg name="port" value="6379" />
  </bean>
    
  <!-- 七、导入分模块配置文件 -->
  <import resource="user/applicationContext-public.xml"/>
  <import resource="order/applicationContext-public.xml"/>
  <import resource="product/applicationContext-public.xml"/>
  <import resource="category/applicationContext-public.xml"/>
  <import resource="news/applicationContext-public.xml"/>
  
</beans> 